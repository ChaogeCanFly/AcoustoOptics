%% New Algorithm
newData = reshape(this.data, this.digitizer.channels,...
                           this.samples.numOfQuant,...
                           this.samples.samplesPerQuant);


%Bring quant-dim to be first (averaging convinient)
newData = permute(newData, [2,1,3]);

newData = reshape(newData, this.samples.numOfQuant,...
                           this.digitizer.channels,...
                           this.samples.samplesPerPulse,...
                           this.samples.trainsPerQuant * this.samples.numOfPos);

newData = reshape(newData, this.samples.numOfQuant,...
                           this.digitizer.channels,... 
                           this.samples.samplesPerPulse,...
                           this.samples.numOfPos,this.samples.trainsPerQuant);

newData = permute(newData, [1,2,3,5,4]);

newData = reshape(newData, this.samples.numOfQuant,...
                           this.digitizer.channels,...
                           this.samples.samplesPerPos,...
                           this.samples.numOfPos);
 


%%Old Algorithm


oldData = reshape(this.data, this.digitizer.channels,...
                                  this.samples.numOfQuant,...
                                  this.samples.samplesPerQuant);

%Bring quant-dim to be first (averaging convinient)
oldData = permute(oldData, [2,1,3]);

%separate trains
oldData = reshape(oldData, this.samples.numOfQuant,...
                               this.digitizer.channels,...
                               this.samples.samplesPerTrain,...
                               this.samples.trainsPerQuant);

for i=1:this.samples.numOfPos
    reshapedOld(:,:,:,i) = reshape(oldData(:, :, ((i-1)*this.samples.samplesPerPulse+1) : (i*this.samples.samplesPerPulse), :),...
                 this.samples.numOfQuant,...
                 this.digitizer.channels,...
                 this.samples.samplesPerPos,...
                 1);
end

oldData = reshapedOld;